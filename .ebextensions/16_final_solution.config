files:
  # Post-deploy hook that runs after application deployment is complete
  "/opt/elasticbeanstalk/hooks/appdeploy/post/01_django_setup.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # Post-deployment script that runs after the application is fully deployed
      
      echo "====== STARTING POST-DEPLOYMENT DJANGO SETUP ======"
      cd /var/app/current
      
      # Activate the correct virtual environment
      source /var/app/venv/*/bin/activate
      echo "Using Python: $(which python)"
      echo "Python version: $(python --version)"
      
      # Check if database exists, create if needed
      if [ ! -f "db.sqlite3" ]; then
        echo "Creating SQLite database file..."
        touch db.sqlite3
        chmod 666 db.sqlite3
      else
        echo "Database file exists"
      fi
      
      # Run Django migrations
      echo "Running Django migrations..."
      python manage.py migrate --noinput
      
      # Verify migrations
      echo "Verifying database tables..."
      python -c "import sqlite3; conn = sqlite3.connect('db.sqlite3'); cursor = conn.cursor(); tables = cursor.execute('SELECT name FROM sqlite_master WHERE type=\"table\";').fetchall(); print('Tables found:', [t[0] for t in tables]); conn.close()"
      
      # Run collectstatic
      echo "Collecting static files..."
      python manage.py collectstatic --noinput
      
      # Verify static files
      echo "Verifying static file directories..."
      echo "Static directory:"
      ls -la static/ || echo "Static directory not found"
      echo "Staticfiles directory:"
      ls -la staticfiles/ || echo "Staticfiles directory not found"
      
      echo "====== POST-DEPLOYMENT DJANGO SETUP COMPLETE ======"

  # Nginx configuration file for static files
  "/etc/nginx/conf.d/django_static.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      # Proper static file configuration for Django
      server {
          listen 80;
          
          # Forward health check requests to the Django app
          location /health/ {
              proxy_pass http://unix:/run/gunicorn.sock;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
          }
          
          # Serve static files directly
          location /static/ {
              alias /var/app/current/static/;
              expires 30d;
              add_header Cache-Control public;
              access_log off;
          }
          
          # Serve media files directly
          location /media/ {
              alias /var/app/current/media/;
              expires 30d;
              add_header Cache-Control public;
              access_log off;
          }
          
          # Forward all other requests to the Django app
          location / {
              proxy_pass http://unix:/run/gunicorn.sock;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }
      }

  # Pre-setup script for static files during container commands phase
  "/tmp/prepare_static_dirs.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      
      echo "====== PREPARING STATIC FILES DIRECTORIES ======"
      # During container commands, we're in the staging environment
      cd /var/app/staging
      
      # Create directories
      mkdir -p static
      mkdir -p staticfiles
      mkdir -p media
      
      # Set proper permissions
      chmod -R 755 static
      chmod -R 755 staticfiles
      chmod -R 755 media
      
      # Copy existing static files to both locations
      if [ -d "clean_backend/static" ]; then
        echo "Copying files from clean_backend/static to /static and /staticfiles..."
        cp -r clean_backend/static/* static/ || true
        cp -r clean_backend/static/* staticfiles/ || true
        
        echo "Contents of static directory:"
        ls -la static/
      else
        echo "No static files found at clean_backend/static"
      fi
      
      echo "====== STATIC FILES PREPARATION COMPLETE ======"

container_commands:
  01_prepare_static_directories:
    command: "/tmp/prepare_static_dirs.sh > /var/log/static_setup.log 2>&1"
  
  02_remove_default_nginx_configs:
    command: "rm -f /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf || true"
  
  03_restart_nginx:
    command: "systemctl restart nginx || service nginx restart" 