files:
  # Main deployment script that runs everything in correct order
  "/opt/elasticbeanstalk/hooks/appdeploy/post/99_final_setup.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -e
      
      echo "========== STARTING DEPLOYMENT SETUP =========="
      
      # Move to application directory
      cd /var/app/current
      
      # Activate virtual environment
      source /var/app/venv/*/bin/activate
      
      # Print environment info for debugging
      echo "Python version: $(python --version)"
      echo "Working directory: $(pwd)"
      
      # NOTE: SQLite is not recommended for production use!
      # This is a temporary solution until you migrate to a proper database
      # Each instance restart will reset your database
      echo "Checking SQLite database..."
      if [ ! -f "db.sqlite3" ]; then
        echo "WARNING: Creating temporary SQLite database. Data will be lost on instance replacement!"
        touch db.sqlite3
        chmod 666 db.sqlite3
      fi
      
      # Run Django migrations
      echo "Running Django migrations..."
      python manage.py migrate --noinput
      
      # Verify database tables
      echo "Verifying django_session table exists..."
      python -c "import sqlite3; conn = sqlite3.connect('db.sqlite3'); cursor = conn.cursor(); cursor.execute('SELECT name FROM sqlite_master WHERE type=\"table\" AND name=\"django_session\";'); exists = cursor.fetchone(); print(f'django_session table: {\"exists\" if exists else \"MISSING\"}'); conn.close()"
      
      # Set up static files directories
      echo "Setting up static file directories..."
      mkdir -p static
      mkdir -p staticfiles
      mkdir -p media
      chmod -R 775 static
      chmod -R 775 staticfiles
      chmod -R 775 media
      
      # Copy static files
      if [ -d "clean_backend/static" ]; then
        echo "Copying files from clean_backend/static to static/"
        cp -r clean_backend/static/* static/ || true
      fi
      
      # Run collectstatic (this should now use the correct STATIC_ROOT)
      echo "Running collectstatic..."
      python manage.py collectstatic --noinput
      
      # Verify static files were collected
      echo "Verifying static files in STATIC_ROOT..."
      ls -la staticfiles/ || true
      
      echo "========== DEPLOYMENT SETUP COMPLETE =========="

  # Custom health check view for Django
  "/var/app/current/health_check.py":
    mode: "000644"
    owner: webapp
    group: webapp
    content: |
      """
      Simple health check view for Django
      Add this to your core/urls.py:
      
      from django.http import HttpResponse
      
      def health_check(request):
          """Simple health check view that returns 200 OK"""
          return HttpResponse("OK")
          
      # And in your urlpatterns:
      path('health/', health_check, name='health_check'),
      """
      from django.http import HttpResponse
      
      def health_check(request):
          """Simple health check view that returns 200 OK"""
          return HttpResponse("OK")

  # Nginx static file configuration (SUPPLEMENT, doesn't replace default)
  "/etc/nginx/conf.d/django_static_location.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      # This file adds static file handling to the default Nginx configuration
      # It does not replace the default configuration
      
      # Static file handling - will be included in the main server block
      location /static/ {
          alias /var/app/current/staticfiles/;
          expires 30d;
          add_header Cache-Control public;
          access_log off;
      }
      
      # Media file handling - will be included in the main server block
      location /media/ {
          alias /var/app/current/media/;
          expires 30d;
          add_header Cache-Control public;
          access_log off;
      }

  # Script to ensure health check route exists in urls.py
  "/tmp/ensure_health_check.py":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env python3
      """
      Script to ensure health check view is defined in urls.py
      """
      import os
      import re
      import sys
      
      # Try to find urls.py
      urls_paths = [
          '/var/app/staging/core/urls.py',
          '/var/app/staging/clean_backend/core/urls.py'
      ]
      
      urls_file = None
      for path in urls_paths:
          if os.path.exists(path):
              urls_file = path
              break
      
      if not urls_file:
          print("Could not find urls.py file")
          sys.exit(1)
      
      # Read the content
      with open(urls_file, 'r') as f:
          content = f.read()
      
      # Check if health check is already defined
      if re.search(r"path\s*\(\s*['\"]health/['\"]", content) or "health_check" in content:
          print(f"Health check appears to be already defined in {urls_file}")
          sys.exit(0)
      
      # Import the health check view at the top
      import_line = "from django.http import HttpResponse\n\ndef health_check(request):\n    return HttpResponse('OK')\n\n"
      
      # Add the path to urlpatterns
      path_pattern = re.compile(r'urlpatterns\s*=\s*\[')
      
      if path_pattern.search(content):
          # Find where to insert the path
          urlpatterns_start = path_pattern.search(content).end()
          path_line = "\n    path('health/', health_check, name='health_check'),"
          
          # Insert after the opening bracket of urlpatterns
          new_content = content[:urlpatterns_start] + path_line + content[urlpatterns_start:]
          
          # Add import at the top
          if "from django.urls import" in new_content:
              # Path is likely already imported
              if not "from django.http import HttpResponse" in new_content:
                  # Add HttpResponse import
                  new_content = "from django.http import HttpResponse\n" + new_content
                  
              # Add health_check function before urlpatterns
              func_insert = path_pattern.search(new_content).start()
              new_content = new_content[:func_insert] + "\ndef health_check(request):\n    return HttpResponse('OK')\n\n" + new_content[func_insert:]
          else:
              # Need to add both imports
              new_content = import_line + new_content
          
          # Write the modified content back
          with open(urls_file, 'w') as f:
              f.write(new_content)
          
          print(f"Added health check view to {urls_file}")
      else:
          print(f"Could not find urlpatterns in {urls_file}")
          sys.exit(1)

container_commands:
  01_setup_static_dirs:
    command: |
      mkdir -p /var/app/staging/static
      mkdir -p /var/app/staging/staticfiles
      mkdir -p /var/app/staging/media
      chmod -R 775 /var/app/staging/static
      chmod -R 775 /var/app/staging/staticfiles
      chmod -R 775 /var/app/staging/media
      # Copy static files to staging
      if [ -d "/var/app/staging/clean_backend/static" ]; then
        cp -r /var/app/staging/clean_backend/static/* /var/app/staging/static/ || true
      fi
  
  02_ensure_health_check:
    command: "/tmp/ensure_health_check.py"
    ignoreErrors: true
    
  03_update_settings:
    command: |
      # Find the settings.py file
      SETTINGS_FILE=$(find /var/app/staging -name settings.py | grep -v venv | head -1)
      if [ -n "$SETTINGS_FILE" ]; then
        echo "Updating $SETTINGS_FILE"
        # Update STATIC_ROOT to point to the correct location
        grep -q "STATIC_ROOT = " $SETTINGS_FILE
        if [ $? -eq 0 ]; then
          # Replace the existing STATIC_ROOT line
          sed -i "s|STATIC_ROOT = .*|STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')|" $SETTINGS_FILE
        else
          # Add STATIC_ROOT if it doesn't exist
          echo "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')" >> $SETTINGS_FILE
        fi
        echo "STATIC_ROOT updated in $SETTINGS_FILE"
      else
        echo "Could not find settings.py file"
      fi
    ignoreErrors: true

option_settings:
  aws:elasticbeanstalk:application:
    Application Healthcheck URL: /health/
    
  aws:elasticbeanstalk:environment:process:default:
    HealthCheckPath: /health/
    MatcherHTTPCode: 200
    
  aws:elasticbeanstalk:container:python:
    WSGIPath: core.wsgi:application 