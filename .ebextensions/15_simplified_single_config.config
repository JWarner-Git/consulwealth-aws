# Single consolidated configuration file for clean deployment
files:
  "/opt/elasticbeanstalk/hooks/appdeploy/post/01_migrate_and_setup.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -e
      
      echo "===== Starting post-deployment setup ====="
      cd /var/app/current
      source /var/app/venv/*/bin/activate
      
      echo "Python version: $(python --version)"
      echo "Django version: $(python -c 'import django; print(django.__version__)')"
      
      # Handle database setup
      echo "Setting up database..."
      if [ ! -f "/var/app/current/db.sqlite3" ]; then
        echo "Creating SQLite database file..."
        touch /var/app/current/db.sqlite3
        chmod 666 /var/app/current/db.sqlite3
      fi
      
      # Run migrations
      echo "Running Django migrations..."
      python manage.py migrate --noinput
      
      # Run collectstatic after migrations
      echo "Running collectstatic..."
      python manage.py collectstatic --noinput
      
      # Verify database
      echo "Verifying database..."
      python -c "import sqlite3; conn = sqlite3.connect('/var/app/current/db.sqlite3'); cursor = conn.cursor(); cursor.execute('SELECT name FROM sqlite_master WHERE type=\"table\";'); print('Tables:', [t[0] for t in cursor.fetchall()]); conn.close()"
      
      # Verify static files after collectstatic
      echo "Verifying static files..."
      ls -la /var/app/current/static/
      ls -la /var/app/current/staticfiles/ || true
      
      echo "===== Post-deployment setup complete ====="

  "/tmp/setup_static_files.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      
      echo "===== Setting up static files ====="
      # Use staging path during container commands phase
      cd /var/app/staging
      
      # Set up directories
      echo "Creating necessary directories..."
      mkdir -p static
      mkdir -p staticfiles
      chmod -R 755 static
      chmod -R 755 staticfiles
      
      # Copy static files from all possible locations
      if [ -d "clean_backend/static" ]; then
        echo "Copying files from clean_backend/static..."
        cp -r clean_backend/static/* static/ || true
        cp -r clean_backend/static/* staticfiles/ || true
      fi
      
      echo "Static files directory contents:"
      ls -la static/
      
      echo "===== Static files setup complete ====="

  "/etc/nginx/conf.d/static_mapping.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      # Static file mappings for Nginx
      location /static/ {
          alias /var/app/current/static/;
          access_log off;
          expires 30d;
          add_header Cache-Control public;
      }

container_commands:
  01_setup_static_files:
    command: "/tmp/setup_static_files.sh > /var/log/static_setup.log 2>&1"
    
  02_remove_default_nginx_config:
    command: "rm -f /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf || true"
    
  03_restart_nginx:
    command: "service nginx restart || true"