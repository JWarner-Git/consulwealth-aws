files:
  # Main deployment script that runs everything in correct order
  "/opt/elasticbeanstalk/hooks/appdeploy/post/99_final_setup.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -e
      
      echo "========== STARTING COMPREHENSIVE DEPLOYMENT SETUP =========="
      
      # Move to application directory
      cd /var/app/current
      
      # Activate virtual environment
      source /var/app/venv/*/bin/activate
      
      # Print environment info for debugging
      echo "Python version: $(python --version)"
      echo "Working directory: $(pwd)"
      echo "Directory contents: $(ls -la)"
      
      # Ensure SQLite database exists with proper permissions
      if [ ! -f "db.sqlite3" ]; then
        echo "Creating SQLite database file..."
        touch db.sqlite3
        chmod 666 db.sqlite3
      else
        echo "Database file exists at $(pwd)/db.sqlite3"
        chmod 666 db.sqlite3 # Ensure it's writable
      fi
      
      # Run Django migrations with verbose output
      echo "Running Django migrations..."
      python manage.py migrate --noinput -v 2
      
      # Verify database tables after migration
      echo "Verifying database tables..."
      python -c "import sqlite3; conn = sqlite3.connect('db.sqlite3'); cursor = conn.cursor(); cursor.execute('SELECT name FROM sqlite_master WHERE type=\"table\";'); tables = cursor.fetchall(); print('TABLES IN DATABASE:', [t[0] for t in tables]); conn.close()"
      
      # Set up static files directories
      mkdir -p static
      mkdir -p staticfiles
      mkdir -p media
      chmod -R 775 static
      chmod -R 775 staticfiles
      chmod -R 775 media
      
      # Copy static files from source to destination
      if [ -d "clean_backend/static" ]; then
        echo "Copying files from clean_backend/static to static/"
        cp -r clean_backend/static/* static/ || true
      fi
      
      # Run collectstatic
      echo "Running collectstatic..."
      python manage.py collectstatic --noinput -v 2
      
      # Verify static files directories after collection
      echo "Static files directories after setup:"
      echo "Root static directory:"
      ls -la static/ || echo "No static directory"
      echo "Django staticfiles directory:"
      ls -la staticfiles/ || echo "No staticfiles directory"
      
      # Create symbolic links to ensure files are accessible in all expected locations
      echo "Creating symbolic links for static files..."
      ln -sf $(pwd)/static $(pwd)/staticfiles || true
      ln -sf $(pwd)/staticfiles $(pwd)/static || true
      
      echo "========== COMPREHENSIVE DEPLOYMENT SETUP COMPLETE =========="

  # Updated Nginx configuration for static files
  "/etc/nginx/conf.d/django_static.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      # Django static files configuration
      server {
          listen 80 default_server;
          
          # Health check endpoint for AWS ELB
          location /health/ {
              proxy_pass http://unix:/run/gunicorn.sock;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
          }
          
          # Try multiple static file locations
          location /static/ {
              # Try multiple possible static file locations
              root /var/app/current;
              try_files $uri $uri/ /var/app/current/staticfiles$uri /var/app/current/static$uri =404;
              expires 30d;
              add_header Cache-Control public;
              access_log off;
          }
          
          # Serve media files
          location /media/ {
              alias /var/app/current/media/;
              expires 30d;
              add_header Cache-Control public;
              access_log off;
          }
          
          # Forward all other requests to the Django app
          location / {
              proxy_pass http://unix:/run/gunicorn.sock;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }
      }

  # Django settings patch to ensure correct static file configuration
  "/var/app/current/static_settings_override.py":
    mode: "000644"
    owner: webapp
    group: webapp
    content: |
      """
      Runtime patch for Django settings to ensure static files work correctly
      """
      import os
      import sys
      
      def apply_patches():
          """Apply runtime patches to Django settings"""
          from django.conf import settings
          
          # Check if we're running on Elastic Beanstalk
          if os.environ.get('AWS_EXECUTION_ENV') or os.environ.get('ELASTICBEANSTALK_ENVIRONMENT'):
              print("Running on Elastic Beanstalk, applying static files patches")
              
              # Set absolute paths based on the current directory
              base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
              
              # Update settings for static files
              settings.STATIC_ROOT = os.path.join(os.path.dirname(base_dir), 'staticfiles')
              
              # Ensure static files dirs includes both possible locations
              static_dirs = list(settings.STATICFILES_DIRS) if hasattr(settings, 'STATICFILES_DIRS') else []
              
              # Add potential static file locations
              possible_static_dirs = [
                  os.path.join(os.path.dirname(base_dir), 'static'),
                  os.path.join(base_dir, 'static'),
              ]
              
              # Add directories that exist and aren't already in the list
              for static_dir in possible_static_dirs:
                  if os.path.isdir(static_dir) and static_dir not in static_dirs:
                      static_dirs.append(static_dir)
              
              settings.STATICFILES_DIRS = static_dirs
              
              print(f"Updated STATIC_ROOT: {settings.STATIC_ROOT}")
              print(f"Updated STATICFILES_DIRS: {settings.STATICFILES_DIRS}")
              
              return True
          return False

  # Patch script for WSGI to load our settings override
  "/tmp/patch_wsgi.py":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env python3
      """
      Script to patch the WSGI file to load our static settings override
      """
      import os
      import sys
      
      # Path to the wsgi file
      wsgi_path = '/var/app/current/core/wsgi.py'
      
      if not os.path.exists(wsgi_path):
          wsgi_path = '/var/app/current/clean_backend/core/wsgi.py'
          
      if not os.path.exists(wsgi_path):
          print(f"Could not find WSGI file at either path")
          sys.exit(1)
      
      # Check if the file is already patched
      with open(wsgi_path, 'r') as f:
          content = f.read()
      
      if 'static_settings_override' in content:
          print(f"WSGI file {wsgi_path} is already patched")
          sys.exit(0)
      
      # Add our import to the wsgi file
      import_line = "\nimport sys, os\nsys.path.append('/var/app/current')\nimport static_settings_override\nstatic_settings_override.apply_patches()\n"
      
      # Find the line with application initialization
      lines = content.split('\n')
      for i, line in enumerate(lines):
          if 'application =' in line:
              lines.insert(i, import_line)
              break
      
      # Write the modified content back
      with open(wsgi_path, 'w') as f:
          f.write('\n'.join(lines))
      
      print(f"Successfully patched WSGI file {wsgi_path}")

container_commands:
  01_remove_default_nginx_config:
    command: "rm -f /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf || true"
    ignoreErrors: true
    
  02_patch_wsgi:
    command: "/tmp/patch_wsgi.py"
    
  03_setup_static_dirs:
    command: |
      mkdir -p /var/app/staging/static
      mkdir -p /var/app/staging/staticfiles
      chmod -R 755 /var/app/staging/static
      chmod -R 755 /var/app/staging/staticfiles
      if [ -d "/var/app/staging/clean_backend/static" ]; then
        cp -r /var/app/staging/clean_backend/static/* /var/app/staging/static/ || true
      fi
    
  04_restart_nginx:
    command: "service nginx restart || systemctl restart nginx || true"
    ignoreErrors: true

option_settings:
  aws:elasticbeanstalk:application:
    Application Healthcheck URL: /health/
    
  aws:elasticbeanstalk:environment:process:default:
    HealthCheckPath: /health/
    MatcherHTTPCode: 200
    
  aws:elasticbeanstalk:container:python:
    WSGIPath: core.wsgi:application 