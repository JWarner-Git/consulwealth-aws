# Database diagnostic and fix config
files:
  "/tmp/diagnose_db.py":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env python3
      import os
      import sys
      import sqlite3
      import subprocess
      from pathlib import Path
      
      print("Database Diagnostic Script")
      print("--------------------------")
      
      # Check environment
      print(f"Current directory: {os.getcwd()}")
      print(f"User: {subprocess.check_output('whoami').decode().strip()}")
      print(f"Python version: {sys.version}")
      
      # Add application path
      app_path = "/var/app/current"
      sys.path.append(app_path)
      
      # Check for database files
      possible_db_paths = [
          "/var/app/current/db.sqlite3",
          "/var/app/current/clean_backend/db.sqlite3",
          "/var/app/staging/db.sqlite3",
      ]
      
      print("\nChecking for database files:")
      for path in possible_db_paths:
          if os.path.exists(path):
              print(f"✓ Found database at: {path}")
              print(f"  Permissions: {subprocess.check_output(['ls', '-la', path]).decode().strip()}")
              
              # Try to connect and check tables
              try:
                  conn = sqlite3.connect(path)
                  cursor = conn.cursor()
                  cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                  tables = cursor.fetchall()
                  print(f"  Tables in database: {[t[0] for t in tables]}")
                  
                  # Check if django_session exists
                  if ('django_session',) not in tables:
                      print("  Warning: django_session table not found!")
                      
                      # Check if we can create the table manually
                      try:
                          print("  Attempting to manually create django_session table...")
                          cursor.execute('''
                          CREATE TABLE IF NOT EXISTS "django_session" (
                              "session_key" varchar(40) NOT NULL PRIMARY KEY,
                              "session_data" text NOT NULL,
                              "expire_date" datetime NOT NULL
                          );
                          ''')
                          cursor.execute('CREATE INDEX IF NOT EXISTS "django_session_expire_date_a5c62663" ON "django_session" ("expire_date");')
                          conn.commit()
                          print("  ✓ Successfully created django_session table!")
                      except Exception as e:
                          print(f"  ✗ Failed to create table: {e}")
                  else:
                      print("  ✓ django_session table exists")
                      
                  conn.close()
              except Exception as e:
                  print(f"  ✗ Error connecting to database: {e}")
          else:
              print(f"✗ No database at: {path}")
      
      # Try to set up Django environment
      print("\nAttempting to check Django settings...")
      try:
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
          import django
          django.setup()
          from django.conf import settings
          
          # Check database settings
          print(f"Database engine: {settings.DATABASES['default']['ENGINE']}")
          print(f"Database name: {settings.DATABASES['default']['NAME']}")
          db_path = settings.DATABASES['default']['NAME']
          
          if not os.path.isabs(db_path):
              abs_path = os.path.join(app_path, db_path)
              print(f"Resolved relative path to: {abs_path}")
              
              # Ensure directory exists
              db_dir = os.path.dirname(abs_path)
              if not os.path.exists(db_dir):
                  print(f"Creating directory: {db_dir}")
                  os.makedirs(db_dir, exist_ok=True)
              
              # Check if we can write to this location
              try:
                  if not os.path.exists(abs_path):
                      with open(abs_path, 'w') as f:
                          pass
                  print(f"✓ Successfully created/accessed database file")
                  
                  # Set permissions
                  subprocess.run(['chmod', '666', abs_path])
                  print(f"Set permissions: {subprocess.check_output(['ls', '-la', abs_path]).decode().strip()}")
              except Exception as e:
                  print(f"✗ Cannot write to database location: {e}")
      except Exception as e:
          print(f"Error setting up Django: {e}")
      
      # Attempt to manually run migrations
      print("\nAttempting to run migrations manually...")
      try:
          result = subprocess.run(
              ["python", "manage.py", "migrate", "--noinput"], 
              cwd=app_path, 
              stdout=subprocess.PIPE, 
              stderr=subprocess.PIPE
          )
          print(f"Migration stdout: {result.stdout.decode()}")
          print(f"Migration stderr: {result.stderr.decode()}")
          
          if result.returncode == 0:
              print("✓ Migrations succeeded!")
          else:
              print(f"✗ Migrations failed with code {result.returncode}")
      except Exception as e:
          print(f"Error running migrations: {e}")

container_commands:
  01_diagnose_database:
    command: "cd /var/app/current && source /var/app/venv/*/bin/activate && python /tmp/diagnose_db.py > /var/log/db_diagnosis.log 2>&1"
    ignoreErrors: true 