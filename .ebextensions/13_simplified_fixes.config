# Simplified fixes for static files and migrations
files:
  "/tmp/run_migrations.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      echo "Starting migrations process..."
      cd /var/app/current
      source /var/app/venv/*/bin/activate
      
      echo "Current directory: $(pwd)"
      echo "Python version: $(python --version)"
      echo "Django version: $(python -c 'import django; print(django.__version__)')"
      
      echo "Checking database file..."
      DB_PATH="/var/app/current/db.sqlite3"
      if [ -f "$DB_PATH" ]; then
          echo "Database file exists at $DB_PATH"
          echo "File permissions: $(ls -l $DB_PATH)"
      else
          echo "Database file not found at $DB_PATH"
          echo "Creating empty database file..."
          touch $DB_PATH
          chmod 666 $DB_PATH
          echo "Created database file with permissions: $(ls -l $DB_PATH)"
      fi
      
      echo "Running migrations..."
      python manage.py migrate --noinput --verbosity=2
      
      if [ $? -eq 0 ]; then
          echo "Migrations completed successfully!"
      else
          echo "Migration failed! Checking database location..."
          find /var/app -name "*.sqlite3" -type f
          echo "Listing Django apps:"
          python -c "import sys; sys.path.append('/var/app/current'); import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings'); import django; django.setup(); from django.apps import apps; print(apps.get_app_configs())"
      fi
      
  "/tmp/fix_static_files.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      echo "Fixing static files..."
      cd /var/app/current
      
      echo "Checking static directories:"
      STATIC_DIR="/var/app/current/static"
      STATICFILES_DIR="/var/app/current/staticfiles"
      APP_STATIC_DIR="/var/app/current/clean_backend/static"
      
      echo "STATIC_DIR: $(ls -la $STATIC_DIR 2>/dev/null || echo 'not found')"
      echo "STATICFILES_DIR: $(ls -la $STATICFILES_DIR 2>/dev/null || echo 'not found')"
      echo "APP_STATIC_DIR: $(ls -la $APP_STATIC_DIR 2>/dev/null || echo 'not found')"
      
      # Create directories if they don't exist
      mkdir -p $STATIC_DIR
      mkdir -p $STATICFILES_DIR
      
      # Copy files from clean_backend/static to both locations
      if [ -d "$APP_STATIC_DIR" ]; then
          echo "Copying files from $APP_STATIC_DIR to $STATIC_DIR"
          cp -r $APP_STATIC_DIR/* $STATIC_DIR/
          
          echo "Copying files from $APP_STATIC_DIR to $STATICFILES_DIR"
          cp -r $APP_STATIC_DIR/* $STATICFILES_DIR/
      else
          echo "Warning: Application static directory not found at $APP_STATIC_DIR"
      fi
      
      # Fix permissions
      chmod -R 755 $STATIC_DIR
      chmod -R 755 $STATICFILES_DIR
      
      echo "Static directories after copying:"
      echo "STATIC_DIR: $(ls -la $STATIC_DIR)"
      echo "STATICFILES_DIR: $(ls -la $STATICFILES_DIR)"
      
  "/etc/nginx/conf.d/static_files.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      # Additional static file locations for Nginx
      location /static/ {
          alias /var/app/current/static/;
          access_log off;
          expires 30d;
          add_header Cache-Control public;
      }
      
      # Also serve from staticfiles directory as fallback
      location /static_alt/ {
          alias /var/app/current/staticfiles/;
          access_log off;
          expires 30d;
          add_header Cache-Control public;
      }
      
      # Also serve from clean_backend/static as another fallback
      location /static_app/ {
          alias /var/app/current/clean_backend/static/;
          access_log off;
          expires 30d;
          add_header Cache-Control public;
      }

container_commands:
  01_run_migrations:
    command: "/tmp/run_migrations.sh > /var/log/migration_debug.log 2>&1"
    ignoreErrors: true
    
  02_fix_static_files:
    command: "/tmp/fix_static_files.sh > /var/log/static_files_debug.log 2>&1"
    
  03_collectstatic:
    command: "cd /var/app/current && source /var/app/venv/*/bin/activate && python manage.py collectstatic --noinput"
    
  04_restart_nginx:
    command: "service nginx restart || systemctl restart nginx" 