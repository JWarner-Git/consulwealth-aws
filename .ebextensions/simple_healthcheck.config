# Simplified health check configuration
files:
  "/var/app/current/healthcheck.py":
    mode: "000755"
    owner: webapp
    group: webapp
    content: |
      #!/usr/bin/env python3
      import http.server
      import socketserver
      from urllib.parse import urlparse
      import sys
      import os
      import signal

      PORT = 8080

      # Kill any existing process using this port
      def kill_process_on_port(port):
          try:
              # Find process using the port
              pid_cmd = f"lsof -i :{port} -t"
              pid = os.popen(pid_cmd).read().strip()
              if pid:
                  print(f"Killing process {pid} on port {port}", file=sys.stderr)
                  os.system(f"kill -9 {pid}")
          except Exception as e:
              print(f"Error killing process on port {port}: {e}", file=sys.stderr)

      # Ensure port is available
      kill_process_on_port(PORT)

      class HealthCheckHandler(http.server.SimpleHTTPRequestHandler):
          def do_GET(self):
              self.send_response(200)
              self.send_header('Content-type', 'text/plain')
              self.end_headers()
              self.wfile.write(b"OK")
              return
          
          def log_message(self, format, *args):
              # Disable logging to keep logs clean
              return

      print(f"Starting health check server on port {PORT}", file=sys.stderr)
      try:
          # Allow reuse of socket to prevent "Address already in use" errors
          socketserver.TCPServer.allow_reuse_address = True
          httpd = socketserver.TCPServer(("", PORT), HealthCheckHandler)
          httpd.serve_forever()
      except Exception as e:
          print(f"Error starting health check server: {e}", file=sys.stderr)
          sys.exit(1)

container_commands:
  01_kill_existing_healthcheck:
    command: "pkill -f 'python3 healthcheck.py' || true"
    ignoreErrors: true
  02_run_healthcheck:
    command: "cd /var/app/current && nohup python3 healthcheck.py > /var/log/healthcheck.log 2>&1 &"
    ignoreErrors: true
  03_check_healthcheck_running:
    command: "sleep 2 && curl -s http://localhost:8080 || echo 'Health check not responding!'"
    ignoreErrors: true

option_settings:
  aws:elasticbeanstalk:application:
    Application Healthcheck URL: /health/
  
  # Set additional health check settings
  aws:elasticbeanstalk:environment:process:default:
    HealthCheckPath: /health/
    MatcherHTTPCode: 200 